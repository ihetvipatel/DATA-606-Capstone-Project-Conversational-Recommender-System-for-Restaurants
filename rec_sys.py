# -*- coding: utf-8 -*-
"""recommender_tester.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rd5n6LxatZ2bcFnAdGrzQN7Xm490aIO3
"""

# Importing Pandas, NumPy, Pickle, and Matplotlib Packages
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
from IPython.display import display

# Importing sklearn Packages
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity, linear_kernel
from sklearn.model_selection import train_test_split 
from sklearn.metrics.pairwise import pairwise_distances
from sklearn.preprocessing import MinMaxScaler

# Importing scipy Packages
from scipy.sparse.linalg import svds


# Importing Plotly Packages
import plotly 
import plotly.offline as py
import plotly.graph_objs as go
import plotly.express as px

yelp_final = pd.read_csv("/content/drive/MyDrive/DATA_606_Capstone/Datasets/philly_df.csv") 

zip_longlat = {8340: (40.022959, -75.21933),
 19102: (39.9502216, -75.166553),
 19103: (39.9500808, -75.1685265),
 19104: (39.954349, -75.2021586),
 19106: (39.9484739, -75.1435556),
 19107: (39.9533414645, -75.1588545174),
 19111: (40.0603863, -75.0845897),
 19112: (39.894345, -75.175177),
 19114: (40.0794684018, -75.0253902955),
 19115: (40.1011904384, -75.028865528),
 19116: (40.110566, -75.0238988),
 19118: (40.0735965366, -75.2026142093),
 19119: (40.0550327831, -75.1869688298),
 19120: (40.0453172867, -75.1176526374),
 19121: (39.9788260422, -75.1589941978),
 19122: (39.9717648, -75.1354975),
 19123: (39.9673315908, -75.1404441921),
 19124: (40.0037398, -75.0946608),
 19125: (39.9705028, -75.1346993),
 19126: (40.0546357, -75.1261125),
 19127: (40.0256009, -75.2234981),
 19128: (40.029494, -75.2059714),
 19129: (40.0128567, -75.1905721),
 19130: (39.9646735, -75.1741002),
 19131: (40.0074349, -75.2124437),
 19132: (39.9933517, -75.1552221),
 19134: (40.0026550293, -75.1114578247),
 19135: (40.0284115716, -75.0590577797),
 19136: (40.0352699, -75.0255875),
 19137: (39.99804, -75.0744267),
 19138: (40.0650858, -75.1553463),
 19139: (39.9646209, -75.2240907),
 19140: (40.0173649056, -75.149853),
 19141: (40.0273606, -75.1539957),
 19142: (39.9169871, -75.237389),
 19143: (39.9477306374, -75.2227761947),
 19144: (40.034015, -75.1718436),
 19145: (39.919628, -75.1713762),
 19146: (39.944571, -75.171679),
 19147: (39.931348, -75.166497),
 19148: (39.9211192555, -75.1632766118),
 19149: (40.0372006, -75.0421226),
 19150: (40.0798783, -75.1735391),
 19151: (39.9776902555, -75.2723037139),
 19152: (40.0572052, -75.0471055),
 19153: (39.8780119385, -75.2394390106),
 19154: (40.0924685, -74.9629393),
 19019: (39.9264892346, -75.16764516),
 19176: (39.883829, -75.2495468)}
# df['latitude'][df['postal_code'] == 19135].mean()

# zip_longlat = {zipcode : (df['longitude'][df['postal_code'] == zipcode].mean(), df['latitude'][df['postal_code'] == zipcode].mean()) for zipcode in zipcodes}
# zip_longlat

location_rec_df = yelp_final
# location_rec_df = yelp_final[['business_id', 'name', 'categories','stars','review_count','latitude','longitude','postal_code']]




top_restaurants_philly = location_rec_df.sort_values(by=['stars', 'review_count'], ascending=False)



top_restaurants_philly = location_rec_df.drop_duplicates(['name'])
# Creating Location-Based Recommendation Function
coordinates = location_rec_df[['longitude','latitude']]

kmeans = KMeans(n_clusters = 20, init = 'k-means++')
kmeans.fit(coordinates)
y = kmeans.labels_
silhouette_score(coordinates, y, metric='euclidean')

def location_based_recommendation(df, latitude, longitude):
    
    """Predict the cluster for longitude and latitude provided"""
    cluster = kmeans.predict(np.array([longitude,latitude]).reshape(1,-1))[0]
    print("This restaurant belongs to cluster:", cluster)
   
    """Get the best restaurant in this cluster along with the relevant information for a user to make a decision"""
    return df[df['cluster']==cluster][df['stars_predicted']>3][['name', 'address','stars', 'review_count', 'categories']].drop_duplicates(['name']).sort_values(by=['review_count'], ascending=False).sample(15).set_index('name')

# # CASE STUDY: Location Rec System
# test_coordinates = {
#     'user': [1, 2, 3], 
#     'latitude' : [39.9582, 39.873580, 39.060386],
#     'longitude' : [-75.1731, -75.142783, -75.084590],
# }

# # test_df = pd.DataFrame(test_coordinates)

# # user1 = test_df[test_df['user'] == 1]
# # user1
# # # Top 10 Recommended Restaurants based on Location at Franklin Institute

# location_based_recommendation(top_restaurants_philly, test_coordinates['latitude'][2], test_coordinates['longitude'][2])

